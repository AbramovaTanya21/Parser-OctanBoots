from selenium import webdriver
from selenium.webdriver.chrome.service import Service
from selenium.webdriver.common.by import By
from selenium.webdriver.common.keys import Keys
from selenium.webdriver.common.action_chains import ActionChains
import threading
import queue
import time

import openpyxl
from openpyxl import Workbook,load_workbook
import os

        
ChromedriverPuth = 'G:\\NRU\\SP\\Parsers\\selenium\\chromedriver\\win64\\139.0.7258.66\\chromedriver.exe'
CollectionFilePath = "G:\\NRU\\SP\\Parsers\\OceanBoots\\OceanBoots\\OceanBoots\\Catalog_OceanBoots.xlsx"
file_name = "OceanBoots_Date.xlsx"
file_path = "./" + file_name  

class TabInd:
            NAME = 0
            ARTICLE = 1
            BRAND = 2
            PRICE = 3
            SIZE = 4
            DESCRIPTION = 5
            PHOTO = 6
            LINK = 7 
            
def GettingColltction(driver):
    
    wb = load_workbook(CollectionFilePath)
    for sh in wb.worksheets:
       ws  = wb[sh.title]
       # ws = wb.active 
       LinkPages = [] 
       last_collection = ws[2][0].value        
       for row in range(2, ws.max_row+1):  
            current_collection = ws[row][0].value 
            if current_collection == None: break  
            if last_collection !=  current_collection : 
                 ParsingCollection(driver, LinkPages, last_collection)  
                 LinkPages.clear()
            LinkPages.append(ws[row][2].value) 
            last_collection = current_collection
       ParsingCollection(driver, LinkPages, last_collection)
    driver.quit() 

def ParsingCollection(driver, LinkPages, last_collection):
   print(f'GettingLinks: Начат сбор ссылок для коллекции {last_collection}') 
   LinksGoods = [] 
   for LinkPage in LinkPages: 
        driver.get(LinkPage)      
        try:              
            ListLG = driver.find_elements(By.XPATH,"//h2[@class = 'product-name']/a")
            for LG in ListLG: LinksGoods.append(LG.get_attribute("href"))         
            try:         
                PaginatorPages = driver.find_elements(By.XPATH, "//ul[@class='pagination']/li[not(contains(@class, 'pagination') or contains(@class, 'active'))]/a")   
                for PaginatorPage in PaginatorPages: 
                    driver.get(PaginatorPage.get_attribute("href"))               
                    ListLG = driver.find_elements(By.XPATH,"//h2[@class = 'product-name']/a")
                    for LG in ListLG: LinksGoods.append(LG.get_attribute("href"))               
            except: print(f'Коллекции {last_collection} не имеет пагинации') 
        except: print("Категория не имеет товаров") 
   ParsingGoods(driver, LinksGoods,last_collection)    


def ParsingGoods(driver, LinksGoods, last_collection):
    
    Goods = []  
    for Link in LinksGoods: 
        driver.get(Link)          
        # Отбор товаров  
        OnSale = driver.find_element(By.XPATH,"//span[@class = 'in-stock']").text         
        if OnSale  != "В наличии":
            break    
        else:       
            # Cбор данных товаров
            Article = driver.find_element(By.XPATH,"//span[@class = 'sku']").text
            Color = Article.split('/')[-1]
    
            FName = driver.find_element(By.XPATH,"//h1").text 
            Name1 = FName + " "+ Color
            Brand = FName.split()[-1]
                
            Prices = driver.find_elements(By.XPATH,"//div[contains(@class,'product-price')]/span[@class= 'price']")
            Price = Prices[-1].text
    
            SizeList = []
            Sizes = driver.find_elements(By.XPATH,"//div[@class = 'product_order']/span")
            for Siz in Sizes:
                    SizeList.append(Siz.text) 
                    Size = ", ".join(SizeList) + "." 
         
            DescrTable = driver.find_elements(By.XPATH,"//div[@class ='product-fields']//strong[@itemprop ='value']")
            for Index, Discr in enumerate(DescrTable):
                if Index == 2:
                    Season = "Сезон:" + Discr.text 
                if Index == 4:
                    UpperMaterial = "Материал верха" + Discr.text 
                if Index == 5:
                    LiningMaterial = "Материал подкладок" + Discr.text
                if Index == 6:
                    InsoleMaterial = "Материал стелек" + Discr.text                  
            Description = Season + " \
            " + UpperMaterial +" \
            "+ LiningMaterial + " \
            " + InsoleMaterial + "\
            Описание и размерные сетки на сайте поставщика: {Link}.\
            Если размерной сетки нет на сайте поставщика, то ее можно нагуглить по названию бренда. Если вы все равно не нашли нужной вам информации,\
            напишите вопрос в обсуждении на форму (ссылка в правой колонке), мы ответим в течение 3х рабочих дней."
            
            # TableSize = []
            # try: 
            #     #Модальное окно не открывается при нажатии
            #     LinkTbSz = driver.find_element(By.XPATH,"//a[@id = 'tbsize-a']").get_attribute("href")
            #     LinkTbSz.click()
                
            #     TableSizes = driver.find_elements(By.XPATH,"//div[@id= 'tab1']//td")           
            #     for TS in TableSizes:                
            #         TableSize.append(TS.text)      
            #     indsize = TableSize.index("Размер")
            #     TabSZ = ", ".join(TableSize[:indsize + 1]) + "\n" + ", ".join(map(str, TableSize[indsize + 1:]))   
            # except:
            #     print("Таблица размеров не найдена")
            # print(TabSZ)   

            Picture = []
            Pictures = driver.find_elements(By.XPATH,"//div[@class ='img-container']/a")
            if len(Pictures) > 5:
                for index, Pict in enumerate(Pictures):                      
                    if index % 2 != 0:
                            Picture.append(Pict.get_attribute("src"))
            else:
                for Pict in Pictures: 
                    Picture.append(Pict.get_attribute("href"))          
 
            # Запись данных в экземляр структуры StructureOfProducts    
            StructureOfProduct = {
                    TabInd.NAME : Name1,
                    TabInd.ARTICLE : Article,
                    TabInd.BRAND : Brand,
                    TabInd.PRICE : Price, 
                    TabInd.SIZE :Size,
                    TabInd.DESCRIPTION : Description,
                    TabInd.PHOTO : Picture,
                    TabInd.LINK : Link,
                    }  
            Goods.append(StructureOfProduct)        
    RecordingToExcel(Goods,last_collection)       
    
    
def RecordingToExcel(Goods,CollectionName): 
    
    if os.path.exists(file_name):
        wb = load_workbook(file_path)
        print(f"RecordingInExcel: Файл '{file_name}' успешно загружен.")    
        if CollectionName in wb.sheetnames:
            ws = wb[CollectionName] 
            print(f"RecordingInExcel: Лист '{CollectionName}' уже существует. Данные будут обновлены.")     
            if ws.cell(row=2, column=1).value is not None:
                for row in ws.iter_rows():
                    for cell in row: 
                        cell.value = None    
        else:
            ws = wb.create_sheet(title=CollectionName)
            print(f"Создан новый лист '{CollectionName}'.")
    else:
       wb = Workbook()  
       print(f"RecordingInExcel:Файл '{file_name}' успешно создан.")     
       ws = wb.create_sheet(title=CollectionName)
       print(f"RecordingInExcel:Создан новый лист '{CollectionName}'.")

    headers = ['Название', 'Артикл', 'Бренд', 'Цена', 'Размер', 'Описание', 'Изображение', 'Изображение1', 'Изображение2', 'Изображение3', 'Ссылка на товар']  
    for col_num, header in enumerate(headers, start=1):
         ws.cell(row=1, column=col_num, value=header)  
    for index, item in enumerate(Goods, start = 2 ):  
        ws.cell(row=index, column=1, value=item[TabInd.NAME])
        ws.cell(row=index, column=2, value=item[TabInd.ARTICLE])
        ws.cell(row=index, column=3, value=item[TabInd.BRAND])
        ws.cell(row=index, column=4, value=item[TabInd.PRICE])
        ws.cell(row=index, column=5, value=item[TabInd.SIZE])
        ws.cell(row=index, column=6, value=item[TabInd.DESCRIPTION])
        for imgindex, img in zip(range(4), item[TabInd.PHOTO]):   
             ws.cell(row=index, column=10 - imgindex, value = img) 
        ws.cell(row=index, column=11, value=item[TabInd.LINK ])
    wb.save(file_path)
    print(f"RecordingInExcel: Данные по категории {CollectionName} успешно записаны в файл '{file_name}'.")   
    
    try:  
        wb["Sheet"].title = "Лист1"
        wb.remove(wb["Лист1"])     
        wb.save(file_path)   
    except: pass 

# Главнвя процедура
s=Service(ChromedriverPuth)
driver = webdriver.Chrome(service=s)

GettingColltction(driver)
print()
